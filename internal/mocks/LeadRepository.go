// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/florinel-chis/gocrm/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// LeadRepository is an autogenerated mock type for the LeadRepository type
type LeadRepository struct {
	mock.Mock
}

// ConvertToCustomer provides a mock function with given fields: leadID, customerID
func (_m *LeadRepository) ConvertToCustomer(leadID uint, customerID uint) error {
	ret := _m.Called(leadID, customerID)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(leadID, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with no fields
func (_m *LeadRepository) Count() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: lead
func (_m *LeadRepository) Create(lead *models.Lead) error {
	ret := _m.Called(lead)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Lead) error); ok {
		r0 = rf(lead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *LeadRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *LeadRepository) GetByID(id uint) (*models.Lead, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Lead
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Lead, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Lead); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lead)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwnerID provides a mock function with given fields: ownerID, offset, limit
func (_m *LeadRepository) GetByOwnerID(ownerID uint, offset int, limit int) ([]models.Lead, error) {
	ret := _m.Called(ownerID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByOwnerID")
	}

	var r0 []models.Lead
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]models.Lead, error)); ok {
		return rf(ownerID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []models.Lead); ok {
		r0 = rf(ownerID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Lead)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(ownerID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: offset, limit
func (_m *LeadRepository) List(offset int, limit int) ([]models.Lead, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Lead
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Lead, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Lead); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Lead)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: lead
func (_m *LeadRepository) Update(lead *models.Lead) error {
	ret := _m.Called(lead)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Lead) error); ok {
		r0 = rf(lead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLeadRepository creates a new instance of LeadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeadRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeadRepository {
	mock := &LeadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
