// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/florinel-chis/gophercrm/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// LeadService is an autogenerated mock type for the LeadService type
type LeadService struct {
	mock.Mock
}

// ConvertToCustomer provides a mock function with given fields: leadID, customerData
func (_m *LeadService) ConvertToCustomer(leadID uint, customerData *models.Customer) (*models.Customer, error) {
	ret := _m.Called(leadID, customerData)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToCustomer")
	}

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *models.Customer) (*models.Customer, error)); ok {
		return rf(leadID, customerData)
	}
	if rf, ok := ret.Get(0).(func(uint, *models.Customer) *models.Customer); ok {
		r0 = rf(leadID, customerData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *models.Customer) error); ok {
		r1 = rf(leadID, customerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: lead
func (_m *LeadService) Create(lead *models.Lead) error {
	ret := _m.Called(lead)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Lead) error); ok {
		r0 = rf(lead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *LeadService) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *LeadService) GetByID(id uint) (*models.Lead, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Lead
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Lead, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Lead); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lead)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwner provides a mock function with given fields: ownerID, offset, limit
func (_m *LeadService) GetByOwner(ownerID uint, offset int, limit int) ([]models.Lead, error) {
	ret := _m.Called(ownerID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByOwner")
	}

	var r0 []models.Lead
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]models.Lead, error)); ok {
		return rf(ownerID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []models.Lead); ok {
		r0 = rf(ownerID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Lead)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(ownerID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: offset, limit
func (_m *LeadService) List(offset int, limit int) ([]models.Lead, int64, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Lead
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Lead, int64, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Lead); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Lead)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: id, updates
func (_m *LeadService) Update(id uint, updates map[string]interface{}) (*models.Lead, error) {
	ret := _m.Called(id, updates)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Lead
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) (*models.Lead, error)); ok {
		return rf(id, updates)
	}
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) *models.Lead); ok {
		r0 = rf(id, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lead)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, map[string]interface{}) error); ok {
		r1 = rf(id, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLeadService creates a new instance of LeadService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeadService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeadService {
	mock := &LeadService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
