// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/florinel-chis/gophercrm/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// APIKeyRepository is an autogenerated mock type for the APIKeyRepository type
type APIKeyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: apiKey
func (_m *APIKeyRepository) Create(apiKey *models.APIKey) error {
	ret := _m.Called(apiKey)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.APIKey) error); ok {
		r0 = rf(apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *APIKeyRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *APIKeyRepository) GetByID(id uint) (*models.APIKey, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.APIKey, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.APIKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByKeyHash provides a mock function with given fields: keyHash
func (_m *APIKeyRepository) GetByKeyHash(keyHash string) (*models.APIKey, error) {
	ret := _m.Called(keyHash)

	if len(ret) == 0 {
		panic("no return value specified for GetByKeyHash")
	}

	var r0 *models.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.APIKey, error)); ok {
		return rf(keyHash)
	}
	if rf, ok := ret.Get(0).(func(string) *models.APIKey); ok {
		r0 = rf(keyHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *APIKeyRepository) GetByUserID(userID uint) ([]models.APIKey, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []models.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.APIKey, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.APIKey); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: apiKey
func (_m *APIKeyRepository) Update(apiKey *models.APIKey) error {
	ret := _m.Called(apiKey)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.APIKey) error); ok {
		r0 = rf(apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastUsed provides a mock function with given fields: id
func (_m *APIKeyRepository) UpdateLastUsed(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastUsed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAPIKeyRepository creates a new instance of APIKeyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIKeyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIKeyRepository {
	mock := &APIKeyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
